from api import PetFriends
from settings import valid_email, valid_password
import os

pf = PetFriends()


def test_get_api_key_for_valid_user(email=valid_email, password=valid_password):
    status, result = pf.get_api_key(email, password)
    assert status == 200
    assert "key" in result


def test_get_all_pets_with_valid_key(filter=""):
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    status, result = pf.get_list_of_pets(auth_key, filter)
    assert status == 200
    assert len(result["pets"]) > 0

def test_add_new_pet_with_valid_data(name='Bob', animal_type='German Shepherd',
                                     age='2', pet_photo='C:/Users/79505/PycharmProjects/pythonProject4/tests/images/image4.jpg'):
    """Проверяем что можно добавить питомца с корректными данными"""

    # Получаем полный путь изображения питомца и сохраняем в переменную pet_photo
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)

    # Запрашиваем ключ api и сохраняем в переменую auth_key
    _, auth_key = pf.get_api_key(valid_email, valid_password)

    # Добавляем питомца
    status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)

    # Сверяем полученный ответ с ожидаемым результатом
    assert status == 200
    assert result['name'] == name


def test_successful_delete_self_pet():
    """Проверяем возможность удаления питомца"""

    # Получаем ключ auth_key и запрашиваем список своих питомцев
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    # Проверяем - если список своих питомцев пустой, то добавляем нового и опять запрашиваем список своих питомцев
    if len(my_pets['pets']) == 0:
        pf.add_new_pet(auth_key, "Мурка", "сиамская", "2", "images/491264-siamskaya-koshka-1.jpg")
        _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    # Берём id первого питомца из списка и отправляем запрос на удаление
    pet_id = my_pets['pets'][0]['id']
    status, _ = pf.delete_pet(auth_key, pet_id)

    # Ещё раз запрашиваем список своих питомцев
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    # Проверяем что статус ответа равен 200 и в списке питомцев нет id удалённого питомца
    assert status == 200
    assert pet_id not in my_pets.values()

def test_successful_update_self_pet_info(name='Мурзик', animal_type='Котэ', age=5):
    """Проверяем возможность обновления информации о питомце"""

    # Получаем ключ auth_key и список своих питомцев
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    # Еслди список не пустой, то пробуем обновить его имя, тип и возраст
    if len(my_pets['pets']) > 0:
        status, result = pf.update_pet_info(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)

        # Проверяем что статус ответа = 200 и имя питомца соответствует заданному
        assert status == 200
        assert result['name'] == name
    else:
        # если спиок питомцев пустой, то выкидываем исключение с текстом об отсутствии своих питомцев
        raise Exception("There is no my pets")

 # вхождение с валидными данными для получение ключа - passed
def test_get_api_key_for_valid_user(email=valid_email, password=valid_password):
    status, result = pet_f.get_api_key(valid_email, valid_password)
    assert status == 200
    assert "key" in result

# вхождение с невалидными данными для получение ключа - passed
def test_get_api_key_for_invalid_user(email=invalid_email, password=invalid_password):
    status, result = pet_f.get_api_key(invalid_email, invalid_password)
    assert status == 403

# вхождение валидным паролем и невалидной почтой для получение ключа - passed
def test_get_api_key_for_invalid_email(email=invalid_email, password=valid_password):
    status, result = pet_f.get_api_key(invalid_email, valid_password)
    assert status == 403

# вхождение валидной почтой и невалидным паролем для получение ключа - passed
def test_get_api_key_for_invalid_password(email=valid_email, password=invalid_password):
    status, result = pet_f.get_api_key(valid_email, invalid_password)
    assert status == 403

# вхождение с валидными данными для получение ключа и получение списка животных через ключ
# Список животных пуст
def test_get_all_pets_by_valid_key(filter=""):
    _, auth_key = pet_f.get_api_key(valid_email, valid_password)
    status, result = pet_f.get_lists_of_pets_by_auth_key(auth_key,filter)
    assert status == 200
    assert len(result['pets']) > 0

def test_post_create_pet_with_novalid_key(name="Мурка", animal_type="Кошка", age=3):
    auth_key = {"key": '8a417540fe39eae66f0bcdbafd453e1fadfc2bf1b50cbc0d634b1fa1'}

    status, result = pet_f.post_create_pet(auth_key,name,animal_type,age)
    assert status == 403

def test_post_new_pet_with_valid_data_novalid_key(name='Vasya', animal_type='Dvornyaga',age='2', pet_photo='images\jpeg\cat.jpg'):
    auth_key = {"key": '8a417540fe39eae66f0bcdbafd453e1fadfc2bf1b50cbc0d634b1fa1'}
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)

    status, result = pet_f.post_add_pet(auth_key,name,animal_type,age,pet_photo)
    assert status == 400

def test_post_new_pet_with_null_data(name='', animal_type='',age='', pet_photo='images\jpeg\cat.jpg'):
    _, auth_key = pet_f.get_api_key(valid_email, valid_password)
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)

    status, result = pet_f.post_add_pet(auth_key, name, animal_type, age,pet_photo)
    assert status == 400

def test_delete_pet_with_valid_data_novalid_key(pet_id=0):
    auth_key = {"key": '8a417540fe39eae66f0bcdbafd453e1fadfc2bf1b50cbc0d634b1fa1'}
    status, _ = pet_f.delete_pet(auth_key,pet_id)
    assert status == 403

def test_put_pet_with_valid_data_novalid_key(pet_id='0',name='Мурзик1',animal_type='Кот', age=1):
    auth_key = {"key": '8a417540fe39eae66f0bcdbafd453e1fadfc2bf1b50cbc0d634b1fa1'}
    status, result = pet_f.put_pet(auth_key,pet_id,name,animal_type,age)
    assert status == 403
